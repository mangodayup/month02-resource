前情回顾

1. 多任务编程

   多任务 ： 计算机能够同时运行多个任务
            cpu  --》 并发 并行

   多任务编程: 程序运行可以同时执行多个任务
              进程  线程

2. 进程

   进程： 程序的执行过程  生命周期  消耗运行资源

   PID  父子进程  进程状态  孤儿进程  僵尸进程

   ps -aux     pstree

3. multiprocessing  模块

   * 写事件函数
   * p = Process(target=fun)
   * p.start()

  控制进程结束：p.join()  daemon=True  sys.exit()
  获取进程ID：os.getpid() os.getppid()
  创建多个子进程



cookie：
代码段 ： 加载执行代码到内存
全局区/静态区 ： 存储全局变量
堆区和栈区： 常量，局部变量 函数空间

练习０１：　
使用自定义进程类完成，传入两个数值
求两个数值之间的质数之和

练习02：
从父进程中不断录入学生成绩，包括姓名和分数
，在子进程中判断这个学生的成绩是否大于等90，
如果是则将其保存起来
保存为一个字典
student = {name:score}

自己设定父子进程结束方式，结束时打印字典
内容

进程总结：

1. 什么是进程  进程相关概念
2. 进程的创建方法 包括自定义进程类（重点）
3. 进程执行现象的理解和进程好处 （难点）
4. 进程间通信

群聊聊天室

有人进入聊天室需要输入姓名，姓名不能重复
有人进入聊天室时，其他人会收到通知：Lucy 进入了聊天室
一个人发消息，其他人会收到： Lucy ： 一起出去玩啊。
有人退出聊天室，则其他人也会收到通知 : Lucy 退出了聊天室

需求分析
  C/S : 客户端服务端模型

技术点分析
  * 网络模型 ： UDP
  * 数据存储 ： 姓名   地址
    {name:address,...}
    [(name,address),...]

  * 收发模型 ： 转发模型
               接收发送各占一个进程


功能拆分和封装结构的设计

 结构 ： 使用函数

 进入聊天室
 聊天
 退出聊天室

通信协议的设计

         请求类型     数据参数
   进入    LOGIN      name
   聊天    CHAT      name  内容
   退出    EXIT


代码的具体模块设计 （写一个功能测一个）

 网络模型搭建 ： 服务端 udp循环

 进入聊天室
   客户端: 输入姓名
   　　　　将姓名发送给服务端
   　　　　接收结果
   　　　　进入聊天室　　重新输入姓名

   服务端: 接收姓名
   　　　　判断用户是否存在
   　　　　给客户端发送结果
          OK：通知其他人，保存信息
          FAIL： 结束

 聊天
     客户端： 创建父子进程
             子进程负责循环接收
             父进程负责循环输入

     服务端: 接收请求
            转发消息



 退出聊天室

整理完善



* 总分处理模式：当服务端应对客户端多种请求时
  循环接收然后分情况讨论

* 网络通信程序，客户端发送的请求类别有多种
  的时候一定需要通信协议加以标识区分


作业 ： 1. 把聊天室现有代码梳理完成
          结构 结构 结构

       2. 完成退出功能




