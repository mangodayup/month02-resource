前情回顾

1. 自定义进程类

   继承Process-> 重写__init__->重写run()

2. 消息队列 （内存）

   q = Queue()
   q.put()
   q.get()

3. 聊天室

   * 代码整体功能由多个功能模块构成，该如何
   分析
   * 服务端应对客户端多种请求时如何处理
   * 当请求类型有多种的时候如何设置通信协议

需求分析
  C/S : 客户端服务端模型

技术点分析
  * 网络模型 ： UDP
  * 数据存储 ： 姓名   地址
    {name:address,...}
    [(name,address),...]

  * 收发模型 ： 转发模型
               接收发送各占一个进程


功能拆分和封装结构的设计

 结构 ： 使用函数

 进入聊天室
 聊天
 退出聊天室

通信协议的设计

         请求类型     数据参数
   进入    LOGIN      name
   聊天    CHAT       name  内容
   退出    EXIT       name


代码的具体模块设计 （写一个功能测一个）

 网络模型搭建 ： 服务端 udp循环

 进入聊天室
   客户端: 输入姓名
   　　　　将姓名发送给服务端
   　　　　接收结果
   　　　　进入聊天室　　重新输入姓名

   服务端: 接收姓名
   　　　　判断用户是否存在
   　　　　给客户端发送结果
          OK：通知其他人，保存信息
          FAIL： 结束

 聊天
     客户端： 创建父子进程
             子进程负责循环接收
             父进程负责循环输入

     服务端: 接收请求
            转发消息


 退出聊天室

整理完善



* 总分处理模式：当服务端应对客户端多种请求时
  循环接收然后分情况讨论

* 网络通信程序，客户端发送的请求类别有多种
  的时候一定需要通信协议加以标识区分

练习01：
现在有500张票  记为 T1 -- T500

现有10个窗口  记为 W1 -- W10  同时售票
直到所有票卖完为止

使用10个线程模拟窗口卖票过程，每卖出一张
打印：  W1 -- T236
每张票出票时间 为 0.1s

练习02：
创建2个分支线程
一个分支线程 打印 1--52 这些写数字
另一个分支线程 打印 A--Z 这些字母

要求在终端打印出的顺序为:12A34B...5152Z

作业　：　1. 总结进程线程的用法
　　　　　２．　聊天室程序自己独立完成





