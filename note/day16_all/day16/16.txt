前情回顾

1. 并发网络情形
   tcp
   短连接： 建立连接 -- 数据交互 -- 关闭连接
   长连接： 建立连接 -- 数据传输 （保持）数据传输 -- 关闭连接

2. 多进程 多线程 网络并发模型

    当有客户端连接到服务端就为其创建新的进程或者线程处理

3. ftp 文件服务

    * 使用面向对象的思想编程多功能代码
    * 使用 tcp 并发网络模型
    * 网络协议中的应答部分

4. IO

   输入（读取）     输出（写入）
   IO密集 ： IO多  耗时长  多阻塞  cpu占用少
   计算密集：计算多 cpu占用大  无阻塞

5. IO模型

   阻塞IO： 默认  简单  效率低


epoll方法训练：

将select_server程序使用epoll方法改写


select和epoll对比

select : 支持操作系统全面
         同时监控的IO数量 1024个，效率没有epoll高
epoll : 支持IO数量无限制，执行效率高
        只支持Linux系统


水平触发：当事件发生，如果不处理会一直通过IO多
         路复用刚返回，直到处理为止

边缘触发：epoll支持，当事件发生，如果不处理
         则不再提示，等下此再有IO就绪时再一
         起提示

作业： 1. 重点代码自己完成
         select_server   epoll_server

      2. 第二阶段知识点总结梳理

