前情回顾

1. 线程

   * 多任务编程
   * 线程是进程的一个分支
   * 线程的创建销毁资源消耗低
   * 线程共享进程资源

2.创建线程

  t = Thread(daemon = True)
  t.start()
  t.join()

  自定义线程类

3. 同步互斥方法

   原理： 利用函数设置的阻塞，控制执行顺序

   e=Event()  e.set() e.clear() e.wait()

   lock=Lock() lock.acquire() lock.release()

   死锁 ： 逻辑混乱

4. GIL问题

   Python线程不会出现并行执行
   在无阻塞的事件执行中不能提高效率

网络并发模型训练

根据多进程并发实现模型，完成多线程网络并发模型
使用面向对象的思想编写


文件服务器

ftp 文件服务器

需求分析：
    分为服务端和客户端，要求可以有多个客户端同时操作。
    客户端可以查看服务器文件库中有什么文件。
    客户端可以从文件库中下载文件到本地。
    客户端可以上传一个本地文件到文件库。
    使用print在客户端打印命令输入提示，引导操作

技术分析：
    并发 ： 多线程
    网络 ： tcp
  文件传输： 边读取边发送    边接收边写入

功能模块划分和封装设计

  封装方法 ： 类

  查看文件列表
  上传文件
  下载文件


网络通信协议设计
                请求类型     数据参数
  查看文件列表     LIST
  上传文件        STOR       filename
  下载文件        RETR       filename
  退出            EXIT

                 响应情况
  查看文件列表     OK （成功） FAIL（失败）
  上传文件        OK （成功） FAIL（失败） EXISTS（文件已存在）
  下载文件        OK （成功） FAIL（失败） NULL（文件不存在）


具体功能模块逻辑分析

  搭建网络模型
  查看文件列表
    客户端： 发送请求 LIST
            等待响应情况，根据情况处理
            OK ： 接收文件列表
            其他 ： 打印情况，结束

    服务端： 接收请求
            判断请求是否可行，发送响应
            OK ： 发送文件列表
            其他: 结束

  下载文件

  上传文件

  退出


* 响应处理 ： 服务端接收到请求后，根据实际
处理情况，按照格式向客户端回复一定的内容

 响应情况表达 ： 单词或者一个数据编号
 响应信息 ： 对响应的基本说明
 响应内容 ： 提供一些数据等


作业： 1. 重点代码 自己独立完成
      2. 文件服务器程序梳理